/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RequestStruct = {
  title: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  locked: PromiseOrValue<boolean>;
  paid: PromiseOrValue<boolean>;
};

export type RequestStructOutput = [string, BigNumber, boolean, boolean] & {
  title: string;
  amount: BigNumber;
  locked: boolean;
  paid: boolean;
};

export interface DelanceInterface extends utils.Interface {
  functions: {
    "createProject(address,uint256,uint256)": FunctionFragment;
    "createRequests(string,uint256)": FunctionFragment;
    "deadline()": FunctionFragment;
    "employer()": FunctionFragment;
    "freelancer()": FunctionFragment;
    "getAllRequests()": FunctionFragment;
    "getFreelancer()": FunctionFragment;
    "greeting()": FunctionFragment;
    "payRequest(uint256)": FunctionFragment;
    "price()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "unlockRequest(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProject"
      | "createRequests"
      | "deadline"
      | "employer"
      | "freelancer"
      | "getAllRequests"
      | "getFreelancer"
      | "greeting"
      | "payRequest"
      | "price"
      | "requests"
      | "unlockRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(functionFragment: "employer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freelancer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreelancer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "greeting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "employer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freelancer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreelancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greeting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockRequest",
    data: BytesLike
  ): Result;

  events: {
    "RequestPaid(address,uint256)": EventFragment;
    "RequestUnlocked(bool)": EventFragment;
    "requestCreated(string,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "requestCreated"): EventFragment;
}

export interface RequestPaidEventObject {
  receiver: string;
  amount: BigNumber;
}
export type RequestPaidEvent = TypedEvent<
  [string, BigNumber],
  RequestPaidEventObject
>;

export type RequestPaidEventFilter = TypedEventFilter<RequestPaidEvent>;

export interface RequestUnlockedEventObject {
  locked: boolean;
}
export type RequestUnlockedEvent = TypedEvent<
  [boolean],
  RequestUnlockedEventObject
>;

export type RequestUnlockedEventFilter = TypedEventFilter<RequestUnlockedEvent>;

export interface requestCreatedEventObject {
  _title: string;
  _amount: BigNumber;
  locked: boolean;
  paid: boolean;
}
export type requestCreatedEvent = TypedEvent<
  [string, BigNumber, boolean, boolean],
  requestCreatedEventObject
>;

export type requestCreatedEventFilter = TypedEventFilter<requestCreatedEvent>;

export interface Delance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProject(
      _freelancer: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRequests(
      _title: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    employer(overrides?: CallOverrides): Promise<[string]>;

    freelancer(overrides?: CallOverrides): Promise<[string]>;

    getAllRequests(overrides?: CallOverrides): Promise<[RequestStructOutput[]]>;

    getFreelancer(overrides?: CallOverrides): Promise<[string]>;

    greeting(overrides?: CallOverrides): Promise<[string]>;

    payRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        title: string;
        amount: BigNumber;
        locked: boolean;
        paid: boolean;
      }
    >;

    unlockRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createProject(
    _freelancer: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRequests(
    _title: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  employer(overrides?: CallOverrides): Promise<string>;

  freelancer(overrides?: CallOverrides): Promise<string>;

  getAllRequests(overrides?: CallOverrides): Promise<RequestStructOutput[]>;

  getFreelancer(overrides?: CallOverrides): Promise<string>;

  greeting(overrides?: CallOverrides): Promise<string>;

  payRequest(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, boolean] & {
      title: string;
      amount: BigNumber;
      locked: boolean;
      paid: boolean;
    }
  >;

  unlockRequest(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createProject(
      _freelancer: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRequests(
      _title: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    employer(overrides?: CallOverrides): Promise<string>;

    freelancer(overrides?: CallOverrides): Promise<string>;

    getAllRequests(overrides?: CallOverrides): Promise<RequestStructOutput[]>;

    getFreelancer(overrides?: CallOverrides): Promise<string>;

    greeting(overrides?: CallOverrides): Promise<string>;

    payRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        title: string;
        amount: BigNumber;
        locked: boolean;
        paid: boolean;
      }
    >;

    unlockRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RequestPaid(address,uint256)"(
      receiver?: null,
      amount?: null
    ): RequestPaidEventFilter;
    RequestPaid(receiver?: null, amount?: null): RequestPaidEventFilter;

    "RequestUnlocked(bool)"(locked?: null): RequestUnlockedEventFilter;
    RequestUnlocked(locked?: null): RequestUnlockedEventFilter;

    "requestCreated(string,uint256,bool,bool)"(
      _title?: null,
      _amount?: null,
      locked?: null,
      paid?: null
    ): requestCreatedEventFilter;
    requestCreated(
      _title?: null,
      _amount?: null,
      locked?: null,
      paid?: null
    ): requestCreatedEventFilter;
  };

  estimateGas: {
    createProject(
      _freelancer: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRequests(
      _title: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    employer(overrides?: CallOverrides): Promise<BigNumber>;

    freelancer(overrides?: CallOverrides): Promise<BigNumber>;

    getAllRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getFreelancer(overrides?: CallOverrides): Promise<BigNumber>;

    greeting(overrides?: CallOverrides): Promise<BigNumber>;

    payRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProject(
      _freelancer: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRequests(
      _title: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    employer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freelancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreelancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    greeting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockRequest(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
